library("httr")
oauth_endpoints("github")
?oauth_endpoints
myapp<-oauth_app("github", key="c8fe20154f4744280768",secret="939e54063533d3bc8e46c087ccb6be79d5038016")
library(Hmisc)
library(dplyr)
install.packages("dplyr")
library(dplyr)
foo
github_token<-oauth2.0_token(oauth_endpoints("github"), myapp)
1
q
install.packages("httpuv")
github_token<-oauth2.0_token(oauth_endpoints("github"), myapp)
github_token<-oauth2.0_token(oauth_endpoints("github"), myapp)
uninstall.packages("httpuv")
github_token<-oauth2.0_token(oauth_endpoints("github"), myapp)
remove.packages("httpuv")
github_token<-oauth2.0_token(oauth_endpoints("github"), myapp)
github_token<-oauth2.0_token(oauth_endpoints("github"), myapp)
github_token<-oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken<-config(token=github_token)
req<-GET("https://api.github.com/rate_limit",gtoken)
stop_for_status(req)
q()
library("httr")
myapp<-oauth_app("github", key="c8fe20154f4744280768",secret="939e54063533d3bc8e46c087ccb6be79d5038016")
github_token<-oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken<-config(token=github_token)
req<-GET("https://api.github.com/rate_limit",gtoken)
stop_for_status(req)
req<-GET("https://api.github.com/users/jtleek/repos",gtoken)
stop_for_status(req)
install.packages("httpuv")
github_token<-oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken<-config(token=github_token)
req<-GET("https://api.github.com/users/jtleek/repos",gtoken)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
req
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
remove.packages("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", "56b637a5baffac62cad9")
myapp<-oauth_app("github", key="c8fe20154f4744280768",secret="939e54063533d3bc8e46c087ccb6be79d5038016")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv",destfile="acs.csv")
read.csv("acs.csv")
acs<-read.csv("acs.csv")
library(sqldf)
install.packages(sqldf)
install.packages("sqldf")
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
unique(acs$AGEP)
sqldf("select distinct agep from acs")
con=url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlcode=readLines(con)
close(con)
htmlcode
htmlcode[1]
htmlcode[c(10,20,30,100)]
sapply(htmlcode[c(10,20,30,100)],nchar)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",destfile="dataset.for")
?data.file
?data.table
?fread
q()
?data.table
?data.frame
?read.fwf
read.ff("dataset.for",widths=c(1,9,5,4,4,5,4,4,5,4,4,5,4,4))
read.fwf("dataset.for",widths=c(1,9,5,4,4,5,4,4,5,4,4,5,4,4))
read.fwf("dataset.for",widths=c(9,5,4,4,5,4,4,5,4,4,5,4,4))
read.fwf("dataset.for",widths=c(10,5,4,4,5,4,4,5,4,4,5,4,4))
fwf<-read.fwf("dataset.for",widths=c(1,9,5,4,4,5,4,4,5,4,4,5,4,4))
fwf[,7]
fwf<-read.fwf("dataset.for",widths=c(1,9,5,4,4,5,4,4,5,4,4,5,4,4),skip=4)
fwf[,7]
sum(fwf[,7])
getwd()
setwd("../week3")
getwd()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile="idaho.csv")
idaho<-read.csv("idaho.csv")
idaho$ACR==3
idaho$ACR==3 & idaho$AGS==6
agricultureLogical<-idaho$ACR==3 & idaho$AGS==6
which(agricultureLogical)
library(jpeg)
install.packages("jpeg")
library(jpeg)
?jpeg
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",destfile = "jeff.jpg")
pic<-jpeg("jeff.jpg")
pic<-jpeg("jeff.jpg",native=TRUE)
quantile(pic)
pic<-readJPEG("jeff.jpg",native=TRUE)
quartile(pic)
?quartile
?quantile
quantile(pic,probs=c(.3,.8))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",destfile="gdp.csv")
gdp<-read.csv("gdp.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv",destfile="edu.csv")
edu<-read.csv("edu.csv")
head(edu)
head(gdp)
summary(gdp)
str(gdp)
gdp[1]
head(edu)
merge(gdp,edu,by.x="X",by.y="CountryCode")
m<-merge(gdp,edu,by.x="X",by.y="CountryCode",all=TRUE)
head(m)
?merge
m<-merge(gdp,edu,by.x="X",by.y="CountryCode",all=FALSE)
m
str(m)
edu
str(edu)
edu$CountryCode
str(gdp)
gdp$X
m<-merge(gdp,edu,by.x="X",by.y="CountryCode",all=FALSE)
m<-merge(gdp,edu,by.x="X",by.y="CountryCode",all=TRUE
)
m<-merge(gdp,edu,by.x="X",by.y="CountryCode",all=FALSE)
m$X
m$CountryCode
?factors
m
length(m)
size(m)
?length
m$X
edu$CountryCode
gdp$X
summary(m)
summary(m$X)
?arrage
?arrange
library(dplyr)
?arrange
summary(gdp)
str(gdp)
summary(edu)
str(gdp)
summary(gdp)
arrange(m,desc(Gross.domestic.product.2012))
arrange(m,desc(Gross.domestic.product.2012))[13,]
arrange(m,desc(Gross.domestic.product.2012))
arrange(gdp,desc(Gross.domestic.product.2012))
arrange(gdp,desc(Gross.domestic.product.2012))[13,]
arrange(gdp,desc(Gross.domestic.product.2012))
head(gdp)
gdp<-read.csv("gdp.csv")
gdp
head(gdp)
m<-merge(gdp,edu,by.x="country",by.y="CountryCode",all=FALSE)
summary(m)
str(m)
m$country
unique(m$country)
arrange(gdp,desc(ranking))
m$ranking
gdp<-read.csv("gdp.csv")
m<-merge(gdp,edu,by.x="country",by.y="CountryCode",all=FALSE)
m$ranking
arrange(gdp,desc(ranking))
arrange(gdp,desc(ranking))
arrange(m,desc(ranking))
foo<-arrange(m,desc(ranking))
foo$ranking
str(foo)
foo$country
foo$country[13,]
foo$country[13]
summary(m)
?colmeans
?colmean
?colMeans
colmeans(m$Income.Group)
colMeans(m$Income.Group)
colMeans(m)
table(m$Income.Group)
table(m$Income.Group,mean)
?table
table(m$Income.Group,m$ranking)
table(m$ranking,m$Income.Group)
logicaloecd<-m$Income.Group=="High Income: OECD"
logicaloecd
m$Income.Group
logicaloecd<-m$Income.Group=="High income: OECD"
m$Income.Group
logicaloecd
m$Income.Group
logicalnonoecd<-m$Income.Group=="High income: nonOECD"
logicalnonoecd
oe<-m[logicaloecd]
oe<-m[logicaloecd,]
oe
oe<-m[logicaloecd,"ranking"]
oe
mean(oe)
no<-m[logicalnonoecd,"ranking"]
mean(no)
no<-m[which(logicalnonoecd),"ranking"]
mean(no)
no
logicalnonoecd
no<-m[logicalnonoecd,"ranking"]
mean(no,na.rm=TRUE)
?quantile
quantile(gdp$ranking)
quantile(gdp$ranking,na.rm=TRUE)
summary(gdp)
m$newranking=cut(m$ranking,breaks=quantile(m$ranking))
m$newranking=cut(m$ranking,breaks=quantile(m$ranking,na.rm=TRUE))
summary(m)
m$newranking=cut(m$ranking,breaks=quantile(m$ranking,probs=c(.2,.4,.6,.8,1),na.rm=TRUE))
summary(m)
m$newranking=cut(m$ranking,breaks=quantile(m$ranking,na.rm=TRUE))
summary(m)
m$newranking=cut(m$ranking,breaks=quantile(m$ranking,probs=c(0,.2,.4,.6,.8,1),na.rm=TRUE))
summary(m)
?table
table(x$newranking ~ x$Income.Group)
table(x$newranking , x$Income.Group)
table(m$newranking , m$Income.Group)
library(swirl)
ls()
rm(list=ls())
install_from_swirl("Getting and Cleaning Data")
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
help("install from swirl")
help("install_from_swirl")
q()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
select(cran,-5:20)
-5:20
-(5:20)
select(cran,-(X:sive))
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,r_version<="3.0.2",country=="IN")
filter(cran,country=="US"|country=="IN")
filter(cran,size>100500,r_os=="linux-gnu")
is.na(c(3,5),NA,10)
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id)
)
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
library(dplyr)
cran<-tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?group
_by()
?group_by
by_package<-group_by(cran,package)
by_package
summarize(by_package,mean(size))
?n
?n_distinct
submit()
pack_sum
quantily(pack_sum$count,probs=0.99)
quantile(pack_sum$count,probs=0.99)
top_counts<-filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs=.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
rm(by_package)
rm(cran)
rm(cran2)
rm(cran3)
rm(pack_sum)
rm(top_countries)
rm(top_counts)
rm(top_counts_sorted)
rm(top_unique)
rm(top_unique_sorted)
students
?gather
gather(students,sex,count,-grade)
students2
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class,c("sex","class"))
submit()
students3
?gather
submit()
?spreadh
?spread
submit()
extract_numeric("class5")
?mutate
submit()
students4
submit()
submit()
submit()
passed
failed
passed<-mutate(passed,status="passed")
failed<-mutate(failed,status="failed")
bind_rows(passed,failed)
sat
?separate
submit()
submit()
bye()
rm(list=ls())
swirl()
Sys.getlocale("LC_TIME")
?Sys.setlocale
Sys.setlocale("LC_TIME","en_US.UTF-8")
library(lubridate)
help(package=lubridate)
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment<-now()
this_moment
minute(this_moment)
my_date<-ymd("2989-05-17")
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment,hours=8,minutes=34,seconds=55)
this_moment
this_moment<-update(this_moment,hours=hour(now()),minutes=minute(now()))
this_moment
nyc<-now(tzone="America/New_York")
nyc
depart<-nyc+days(2)
depart
depart<-update(depart,hours=17,minutes=34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive,tzone="Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008",tz="Singapore")
last_time
?new_interval
how_long<-new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
q()
